plugins {
    id 'jacoco'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "ch.epfl.sdp.appart"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "ch.epfl.sdp.appart.CustomTestRunner"
        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner" //replaced when using hilt

        Properties properties = new Properties();
        if(rootProject.file("local.properties").exists()) {
            properties.load(rootProject.file("local.properties").newDataInputStream())
            manifestPlaceholders =  [ mapsApiKey : properties.getProperty("MAPS_API_KEY", "")]
        } else {
            manifestPlaceholders = [ mapsApiKey : System.getenv("MAPS_API_KEY")]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        animationsDisabled = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'com.github.bumptech.glide:annotations:4.12.0'
    implementation 'com.google.firebase:firebase-storage:19.2.2'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-core:2.+"
    androidTestImplementation "org.mockito:mockito-core:2.+"
    implementation 'org.hamcrest:hamcrest:2.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    implementation platform('com.google.firebase:firebase-bom:26.6.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.firebaseui:firebase-ui-storage:4.3.2'
    implementation "com.google.dagger:hilt-android:$hilt_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    annotationProcessor "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
    androidTestAnnotationProcessor "com.google.dagger:hilt-android-compiler:$hilt_version"
    implementation 'com.google.vr:sdk-panowidget:1.180.0'
    implementation 'com.github.hannesa2:panoramagl:1.4'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            'app/src/main/java/ch/epfl/sdp/appart/login/LoginCallback.java',
            'app/src/main/java/ch/epfl/sdp/appart/login/LoginService.java',
            'app/src/main/java/ch/epfl/sdp/appart/database/Database.java',
            'app/src/main/java/ch/epfl/sdp/appart/user/User.java',
            'app/src/main/java/ch/epfl/sdp/appart/hilt/FireBaseModule.java',
            'app/src/main/java/ch/epfl/sdp/appart/glide/visitor/DatabaseVisitorHost.java',
            'app/src/main/java/ch/epfl/sdp/appart/glide/visitor/GlideLoaderVisitor.java',
            'app/src/main/java/ch/epfl/sdp/appart/hilt/LoginModule.java',
            'app/src/main/java/ch/epfl/sdp/appart/login/MockLoginServiceException.java',
            'app/src/main/java/ch/epfl/sdp/appart/login/FirebaseEmulatorLoginServiceWrapper.java',
            // Exclude Hilt generated classes
            '**/*Hilt*.*',
            'hilt_aggregated_deps/**',
            '**/*_Factory.class',
            '**/*_MembersInjector.class'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}

hilt {
    enableTransformForLocalTests = true
}

package ch.epfl.sdp.appart;

import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.util.Log;

import androidx.test.platform.app.InstrumentationRegistry;

import com.google.firebase.firestore.FirebaseFirestore;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import ch.epfl.sdp.appart.ad.Ad;
import ch.epfl.sdp.appart.ad.ContactInfo;
import ch.epfl.sdp.appart.database.DatabaseService;
import ch.epfl.sdp.appart.database.FirestoreDatabaseService;
import ch.epfl.sdp.appart.database.FirestoreEmulatorDatabaseServiceWrapper;
import ch.epfl.sdp.appart.hilt.DatabaseModule;
import ch.epfl.sdp.appart.hilt.LoginModule;
import ch.epfl.sdp.appart.login.FirebaseEmulatorLoginServiceWrapper;
import ch.epfl.sdp.appart.login.FirebaseLoginService;
import ch.epfl.sdp.appart.login.LoginService;
import ch.epfl.sdp.appart.scrolling.PricePeriod;
import ch.epfl.sdp.appart.scrolling.card.Card;
import ch.epfl.sdp.appart.user.AppUser;
import ch.epfl.sdp.appart.user.User;
import dagger.hilt.android.testing.BindValue;
import dagger.hilt.android.testing.HiltAndroidRule;
import dagger.hilt.android.testing.HiltAndroidTest;
import dagger.hilt.android.testing.UninstallModules;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThrows;

@UninstallModules(DatabaseModule.class)
@HiltAndroidTest
public class DatabaseTest {

    @Rule(order = 0)
    public HiltAndroidRule hiltRule = new HiltAndroidRule(this);

    @BindValue
    DatabaseService db = new FirestoreEmulatorDatabaseServiceWrapper(new FirestoreDatabaseService());

    String cardId = null;
    User globalUser = null;

    @Before
    public void setup() {
        db.clearCache().join();
    }

    public void addingCardsAndUpdateTest() {
        String id = "testID";
        String ownerID = "ownerTestID";
        String city = "Lausanne";
        long price = 1000;
        String imageURL = "fakeURL";

        Card card = new Card(id, ownerID, city, price, imageURL);
        cardId = db.putCard(card).join();

        List<Card> retrievedCards = db.getCards().join();

        assertThat(retrievedCards.size(), is(1));

        Card retrievedCard = retrievedCards.get(0);

        assertThat(retrievedCard.getId(), is(cardId)); //id generated by Firestore not testable I believe @ADG
        assertThat(retrievedCard.getCity(), is(city));
        assertThat(retrievedCard.getImageUrl(), is(imageURL));
        assertThat(retrievedCard.getPrice(), is(price));
        assertThat(retrievedCard.getUserId(), is(ownerID));

        retrievedCard.setCity("Zürich");

        db.updateCard(retrievedCard);

        retrievedCards = db.getCards().join();
        retrievedCard = retrievedCards.get(0);

        assertThat(retrievedCard.getCity(), is("Zürich"));
    }

    public void putCardThrowsOnNull() {
        assertThrows(IllegalArgumentException.class, () -> db.putCard(null));
    }

    public void verifyUser(User retrievedUser, long age, String name, String id, String email) {
        assertThat(retrievedUser.getUserEmail(), is(email));
        assertThat(retrievedUser.getName(), is(name));
        assertThat(retrievedUser.getUserId(), is(id));
        assertThat(retrievedUser.getAge(), is(age));
        assertThat(retrievedUser.getUserId(), is(id));
    }

    public void addingUsersAndUpdateTest() {
        String email = "fakeemail@testappart.ch";
        String userId = "userTestID";
        String name = "TestName";
        long age = 22;

        User user = new AppUser(userId, email);
        user.setAge(age);
        user.setName(name);

        db.putUser(user).join();

        User retrievedUser = db.getUser(user.getUserId()).join();

        verifyUser(retrievedUser, age, name, userId, email);



        email = "newFakeEmail@testappart.ch";
        name = "TestName2";
        age = 30;
        user = new AppUser(userId, email);

        user.setAge(age);
        user.setName(name);
        user.setUserEmail(email);

        db.updateUser(user).join();

        retrievedUser = db.getUser(user.getUserId()).join();

        verifyUser(retrievedUser, age, name, userId, email);
        globalUser = retrievedUser;
    }

    public void verifyAd(Ad retrievedAd, String title, String street, String city, String desc, long price, String advertiserId, ContactInfo contactInfo, PricePeriod pricePeriod, ArrayList<String> photosIds) {
        assertThat(retrievedAd.getTitle(), is(title));
        assertThat(retrievedAd.getStreet(), is(street));
        assertThat(retrievedAd.getAdvertiserId(), is(advertiserId));
        assertThat(retrievedAd.getCity(), is(city));
        assertThat(retrievedAd.getDescription(), is(desc));
        assertThat(retrievedAd.getPrice(), is(price));
        assertThat(retrievedAd.getContactInfo().name, is(contactInfo.name));
        assertThat(retrievedAd.getContactInfo().userEmail, is(contactInfo.userEmail));
        assertThat(retrievedAd.getContactInfo().userPhoneNumber, is(contactInfo.userPhoneNumber));
        assertThat(retrievedAd.getPricePeriod(), is(pricePeriod));
        assertThat(retrievedAd.getPhotosRefs().get(0), is(photosIds.get(0)));
    }

    /*public void addingAdAndGetTest() throws IOException {
        Ad.AdBuilder builder = new Ad.AdBuilder();

        String title = "Test ad";
        String street = "Fake street";
        String city = "Lausanne";
        String desc = "Fake description";
        long price = 1000;
        ContactInfo contactInfo = new ContactInfo(globalUser.getUserEmail(), "", globalUser.getName());
        PricePeriod pricePeriod = PricePeriod.MONTH;
        ArrayList<String> photoIds = new ArrayList<>();

        AssetManager manager = InstrumentationRegistry.getInstrumentation().getContext().getAssets();
        String list[] = manager.list("");
        AssetFileDescriptor fd = manager.openFd("panorama_test.jpg");



        photoIds.add("file:///android_test_asset/panorama_test.jpg");

        String path = getClass().getClassLoader().getResource("").getPath();

        builder.withTitle(title);
        builder.withStreet(street);
        builder.withAdvertiserId(globalUser.getUserId());
        builder.withCity(city);
        builder.withDescription(desc);
        builder.withPrice(price);
        builder.withContactInfo(contactInfo);
        builder.withPhotosIds(photoIds);
        builder.withPricePeriod(pricePeriod);

        Ad ad = builder.build();

        String adId = db.putAd(ad).join();



        CompletableFuture<Ad> futureAd = db.getAd(adId);
        futureAd.exceptionally(e -> {
            Log.d("DatabseTest", e.getMessage());
            return null;
        });
        futureAd.join();
        verifyAd(futureAd.join(), title, street, city, desc, price, globalUser.getUserId(), contactInfo, pricePeriod, photoIds);



    }*/

    @Test
    public void databaseTest() throws IOException {
        addingCardsAndUpdateTest();
        putCardThrowsOnNull();
        addingUsersAndUpdateTest();
        //addingAdAndGetTest();
    }
}
